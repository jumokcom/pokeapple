'use client'

import { useState, useEffect, useCallback, useMemo } from 'react'
import { GameState, GameMode, GAME_MODE_CONFIGS } from '@/types/game'
import { createInitialGameState } from '@/lib/game/gameLogic'
import { hasValidMatches, shuffleExistingTiles, hasRemainingPokemon } from '@/lib/game/shuffleLogic'
import { useAuth } from '@/contexts/AuthContext'
import { saveGameScore } from '@/lib/supabase'

export type GamePhase = 'main' | 'countdown' | 'playing' | 'gameOver'

export function useGameState(initialMode: GameMode = 'normal') {
  const [gameState, setGameState] = useState<GameState | null>(null)
  const [gamePhase, setGamePhase] = useState<GamePhase>('main')
  const [countdownNumber, setCountdownNumber] = useState(3)
  const [timeLeft, setTimeLeft] = useState(120)
  const [selectedMode, setSelectedMode] = useState<GameMode>(initialMode)
  const [scoreSaved, setScoreSaved] = useState(false)
  const [isShuffling, setIsShuffling] = useState(false)
  const [shuffleCount, setShuffleCount] = useState(0)
  
  const { isAuthenticated } = useAuth()

  // Í≤åÏûÑ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    const newGameState = createInitialGameState(selectedMode)
    setGameState(newGameState)
    setTimeLeft(newGameState.timeLeft)
    setScoreSaved(false)
    setShuffleCount(0)
  }, [selectedMode])

  // Ï†êÏàò Ï†ÄÏû• Ìï®Ïàò
  const handleSaveScore = useCallback(async () => {
    if (!gameState || scoreSaved) return null
    
    // Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©ÏûêÎäî Ï†êÏàòÎ•º Ï†ÄÏû•ÌïòÏßÄ ÏïäÏßÄÎßå Í≤∞Í≥ºÎäî Î∞òÌôò
    if (!isAuthenticated) {
      return { 
        success: false, 
        score: gameState.score, 
        isAuthenticated: false,
        isPerfectGame: gameState.score === 144
      }
    }
    
    try {
      setScoreSaved(true)
      const result = await saveGameScore(gameState.score, selectedMode)
      
      return {
        success: true,
        score: result.score,
        isAuthenticated: true,
        isNewRecord: result.isNewRecord,
        previousBest: result.isNewRecord ? result.previousBest : undefined,
        currentBest: !result.isNewRecord ? result.currentBest : undefined,
        isPerfectGame: result.score === 144,
        mode: selectedMode
      }
    } catch (error) {
      console.error('Ï†êÏàò Ï†ÄÏû• Ïã§Ìå®:', error)
      setScoreSaved(false)
      return {
        success: false,
        score: gameState.score,
        isAuthenticated: true,
        error: error instanceof Error ? error.message : 'Ï†êÏàò Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§',
        isPerfectGame: gameState.score === 144
      }
    }
  }, [gameState, scoreSaved, isAuthenticated, selectedMode])

  // Í≤åÏûÑ ÏãúÏûë
  const startCountdown = useCallback(() => {
    setGamePhase('countdown')
    setCountdownNumber(3)
    const modeConfig = GAME_MODE_CONFIGS[selectedMode]
    setTimeLeft(modeConfig.timeLimit)
    
    const countdownInterval = setInterval(() => {
      setCountdownNumber(prev => {
        if (prev <= 1) {
          clearInterval(countdownInterval)
          setGamePhase('playing')
          return 0
        }
        return prev - 1
      })
    }, 1000)
  }, [selectedMode])

  // Í≤åÏûÑ Î¶¨ÏÖã
  const resetGame = useCallback(() => {
    setGamePhase('main')
    const newGameState = createInitialGameState(selectedMode)
    setGameState(newGameState)
    setTimeLeft(newGameState.timeLeft)
    setScoreSaved(false)
    setShuffleCount(0)
  }, [selectedMode])

  // ÏûêÎèô ÏÖîÌîå
  const performAutoShuffle = useCallback(() => {
    if (!gameState || isShuffling) return Promise.resolve()
    
    return new Promise<void>((resolve) => {
      setIsShuffling(true)
      setShuffleCount(prev => {
        console.log(`üîÑ ÏÖîÌîå ÏãúÏûë: ${prev + 1}Î≤àÏß∏`)
        return prev + 1
      })
      
      setTimeout(() => {
        setGameState(prev => {
          if (!prev) return null
          const shuffledBoard = shuffleExistingTiles(prev.board)
          console.log('üîÑ Î≥¥Îìú ÏÑûÍ∏∞ ÏôÑÎ£å')
          return { ...prev, board: shuffledBoard }
        })
        
        setTimeout(() => {
          setIsShuffling(false)
          console.log('üîÑ ÏÖîÌîå Ïï†ÎãàÎ©îÏù¥ÏÖò ÏôÑÎ£å')
          resolve()
        }, 500)
      }, 500)
    })
  }, [gameState, isShuffling])

  // Îß§Ïπò Í∞ÄÎä• Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Î∞è ÏûêÎèô ÏÖîÌîå
  const checkAndShuffle = useCallback(async () => {
    if (!gameState || isShuffling) return
    
    // ÎÇ®ÏùÄ Ìè¨ÏºìÎ™¨Ïù¥ ÏóÜÏúºÎ©¥ Í≤åÏûÑ ÏôÑÎ£å
    if (!hasRemainingPokemon(gameState.board)) {
      console.log("üéâ Í≤åÏûÑ ÏôÑÎ£å! Î™®Îì† Ìè¨ÏºìÎ™¨ÏùÑ Ï†úÍ±∞ÌñàÏäµÎãàÎã§.")
      setGamePhase('gameOver')
      const result = await handleSaveScore()
      return result
    }
    
    // Îß§Ïπò Í∞ÄÎä•Ìïú Ï°∞Ìï©Ïù¥ ÏûàÏúºÎ©¥ ÏÖîÌîå Î∂àÌïÑÏöî
    if (hasValidMatches(gameState.board)) {
      console.log("‚úÖ Îß§Ïπò Í∞ÄÎä•Ìïú Ï°∞Ìï©Ïù¥ ÏûàÏäµÎãàÎã§.")
      setShuffleCount(0) // Îß§Ïπò Í∞ÄÎä•ÌïòÎ©¥ ÏÖîÌîå Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
      return
    }
    
    // ÏµúÎåÄ ÏÖîÌîå ÌöüÏàò Ï†úÌïú (5Î≤à)
    if (shuffleCount >= 5) {
      console.log("‚ùå ÏµúÎåÄ ÏÖîÌîå ÌöüÏàò ÎèÑÎã¨! Í≤åÏûÑÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.")
      setGamePhase('gameOver')
      const result = await handleSaveScore()
      return result
    }
    
    console.log(`üö´ Îß§Ïπò Î∂àÍ∞ÄÎä•! ÏûêÎèô ÏÖîÌîåÏùÑ ÏãúÏûëÌï©ÎãàÎã§. (${shuffleCount + 1}/5)`)
    
    // ÏÖîÌîå Ïã§Ìñâ
    await performAutoShuffle()
    
    // ÏÖîÌîå ÌõÑ 0.6Ï¥à Îí§ Îã§Ïãú Ï≤¥ÌÅ¨
    setTimeout(async () => {
      console.log('üîç ÏÖîÌîå ÌõÑ Îß§Ïπò Í∞ÄÎä•ÏÑ± Ïû¨Í≤ÄÏÇ¨...')
      await checkAndShuffle()
    }, 600)
  }, [gameState, isShuffling, shuffleCount, handleSaveScore])

  // Í≤åÏûÑ Ï¢ÖÎ£å Ï≤òÎ¶¨
  const endGame = useCallback(async () => {
    setGamePhase('gameOver')
    const result = await handleSaveScore()
    return result
  }, [handleSaveScore])

  return useMemo(() => ({
    // ÏÉÅÌÉú
    gameState,
    gamePhase,
    countdownNumber,
    timeLeft,
    selectedMode,
    scoreSaved,
    isShuffling,
    shuffleCount,
    
    // Ïï°ÏÖò
    setGameState,
    setGamePhase,
    setTimeLeft,
    setSelectedMode,
    startCountdown,
    resetGame,
    checkAndShuffle,
    endGame,
    handleSaveScore
  }), [
    gameState,
    gamePhase,
    countdownNumber,
    timeLeft,
    selectedMode,
    scoreSaved,
    isShuffling,
    shuffleCount,
    setGameState,
    setGamePhase,
    setTimeLeft,
    setSelectedMode,
    startCountdown,
    resetGame,
    checkAndShuffle,
    endGame,
    handleSaveScore
  ])
} 